<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>practices on WellsFargo Application Modernization Cookbook</title><link>/tags/practices/</link><description>Recent content in practices on WellsFargo Application Modernization Cookbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright> Wells Fargo, All rights Reserved, Confidential</copyright><lastBuildDate>Wed, 09 Dec 2020 00:00:00 -0600</lastBuildDate><atom:link href="/tags/practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom Spring Bean Validation</title><link>/best-practices/custom-spring-validation/</link><pubDate>Wed, 09 Dec 2020 00:00:00 -0600</pubDate><guid>/best-practices/custom-spring-validation/</guid><description>Context While implementing Spring REST endpoints for Spring boot applications, adding validations (inbuilt/custom) becomes inevitable. For most cases the inbuilt validators provided by JSR 380, also known as Bean Validation 2.0 framework would suffice. Some of the inbuilt validators provided are: @NotNull, @NotEmpty, @NotBlank, @Min, @Max, @Size to name a few. There are still instances where the validation need canâ€™t be taken care of by the inbuilt validators provided by JSR 380 and in such cases we need to write custom validators which takes care of providing custom validation logic to the bean attributes.</description></item><item><title>Structuring Spring Boot</title><link>/best-practices/spring-boot-structure/</link><pubDate>Wed, 09 Dec 2020 00:00:00 -0600</pubDate><guid>/best-practices/spring-boot-structure/</guid><description>Context This guide presents one possible way to structure a spring boot app. It is only a starting point for deciding a structure which best suits your team, requirements, company, time, and app complexity.
Layers Why even have layers today? What year is this? &amp;ldquo;Most of the examples I see have one Spring bean which does config &amp;amp; endpoints &amp;amp; data &amp;amp; security &amp;amp; validation &amp;amp; pancakes.&amp;quot;
An argument can be made that trivial services (especially focused examples) have no need for the overhead of multiple layers, packages, separation of duties, abstraction, and even basic organization.</description></item><item><title>Best Practices</title><link>/best-practices/</link><pubDate>Wed, 09 Dec 2020 00:00:00 -0600</pubDate><guid>/best-practices/</guid><description>Best practices for spring boot applications</description></item></channel></rss>