<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>custom spring bean validation on WellsFargo Application Modernization Cookbook</title>
    <link>/tags/custom-spring-bean-validation/</link>
    <description>Recent content in custom spring bean validation on WellsFargo Application Modernization Cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright> Wells Fargo, All Rights Reserved, Confidential</copyright>
    <lastBuildDate>Wed, 09 Dec 2020 00:00:00 -0600</lastBuildDate><atom:link href="/tags/custom-spring-bean-validation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Custom Spring Bean Validation</title>
      <link>/best-practices/custom-spring-validation/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 -0600</pubDate>
      
      <guid>/best-practices/custom-spring-validation/</guid>
      <description>Context While implementing Spring REST endpoints for Spring boot applications, adding validations (inbuilt/custom) becomes inevitable. For most cases the inbuilt validators provided by JSR 380, also known as Bean Validation 2.0 framework would suffice. Some of the inbuilt validators provided are: @NotNull, @NotEmpty, @NotBlank, @Min, @Max, @Size to name a few. There are still instances where the validation need canâ€™t be taken care of by the inbuilt validators provided by JSR 380 and in such cases we need to write custom validators which takes care of providing custom validation logic to the bean attributes.</description>
    </item>
    
  </channel>
</rss>
