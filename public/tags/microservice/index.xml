<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>microservice on WellsFargo Application Modernization Cookbook</title><link>/tags/microservice/</link><description>Recent content in microservice on WellsFargo Application Modernization Cookbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright> Wells Fargo, All Rights Reserved, Confidential</copyright><lastBuildDate>Tue, 05 Jan 2021 00:00:00 -0600</lastBuildDate><atom:link href="/tags/microservice/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Commit Best Practices</title><link>/best-practices/git-commit-messages/</link><pubDate>Tue, 05 Jan 2021 00:00:00 -0600</pubDate><guid>/best-practices/git-commit-messages/</guid><description>CONTEXT This recipe provides details of how to write good commit message.
What is a commit message? The commit command is used to save changes to a local repository after staging in Git. However, before you can save changes in Git, you have to tell Git which changes you want to save. A great way to do that is by adding a commit message to identify your changes.
Why commit messages are important?</description></item><item><title>1. Create barebone microservice using the starter</title><link>/common/create-app-using-starter/</link><pubDate>Wed, 09 Dec 2020 00:00:00 -0600</pubDate><guid>/common/create-app-using-starter/</guid><description>How to create a microservice using the greenfield-app-starter</description></item><item><title>Organize codebase</title><link>/best-practices/spring-boot-structure/</link><pubDate>Wed, 09 Dec 2020 00:00:00 -0600</pubDate><guid>/best-practices/spring-boot-structure/</guid><description>CONTEXT This recipe provides details for organizing codebase in a typical spring boot microservice.
SOLUTION Layers Why even have layers today? What year is this? Most of the examples I see have one Spring bean which does configuration, endpoints, data, security, validation and pancakes&amp;hellip;
An argument can be made that trivial services (especially focused examples) have no need for the overhead of multiple layers, packages, separation of duties, abstraction, and even basic organization.</description></item><item><title>Custom Spring Bean Validation</title><link>/best-practices/custom-spring-validation/</link><pubDate>Wed, 09 Dec 2020 00:00:00 -0600</pubDate><guid>/best-practices/custom-spring-validation/</guid><description>Context While implementing Spring REST endpoints for Spring boot applications, adding validations (inbuilt/custom) becomes inevitable. For most cases the inbuilt validators provided by JSR 380, also known as Bean Validation 2.0 framework would suffice. Some of the inbuilt validators provided are: @NotNull, @NotEmpty, @NotBlank, @Min, @Max, @Size to name a few. There are still instances where the validation need canâ€™t be taken care of by the inbuilt validators provided by JSR 380 and in such cases we need to write custom validators which takes care of providing custom validation logic to the bean attributes.</description></item></channel></rss>